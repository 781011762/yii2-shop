<?php
namespace frontend\controllers;

use backend\models\Article;
use backend\models\ArticleCategory;
use backend\models\Brand;
use backend\models\Goods;
use backend\models\GoodsCategory;
use frontend\models\Address;
use frontend\models\Cart;
use frontend\models\LoginForm;
use frontend\models\Order;
use frontend\models\OrderGoods;
use frontend\models\RegisterForm;
use frontend\models\UserEditPassword;
use yii\web\Controller;
use yii\web\Cookie;
use yii\web\Response;
use yii;

class ApiController extends Controller{
	public $token = "ymc_8803";
	public $result = [
		"error" => false,//成功为true
		"msg" => "",//返回的错误信息
		"data" => [],//返回数据
	];
	public $enableCsrfValidation = false;
	public function init()
	{
		//$this->check();//加入接口的安全验证.
		\Yii::$app->response->format = Response::FORMAT_JSON;
		parent::init(); // TODO: Change the autogenerated stub
	}
//用户
	//用户注册
	public function actionUserRegister(){
		if (\Yii::$app->request->isPost){
			$model = new RegisterForm();
			$model->load(\Yii::$app->request->post(),'');
			if ($model->validate()){
				$model->saveMember();
				//提示注册成功
				$this->result["error"] = true;
			}else{
				//提示注册失败信息
				$this->result["msg"] = $model->getErrors();
			}
		}else{
			$this->result["msg"] = "请求方式错误";
		}
		return $this->result;
	}
	//会员登录
	public function actionUserLogin(){
		if (\Yii::$app->request->isPost){
			$model = new LoginForm();
			$model->load(\Yii::$app->request->post(),'');
			if ($model->validate()){
				if ($model->login()){
					//通过认证
					$this->result["error"] = true;
				}else{
					//提示登录失败信息
					$this->result["msg"] = $model->getErrors();
				}
			}else{
				//提示登录失败信息
				$this->result["msg"] = "密码和账号必填";
			}
		}else{
			$this->result["msg"] = "请求方式错误";
		}
		return $this->result;
	}
	//会员修改密码
	public function actionUserEditPassword(){
		$request = \Yii::$app->request;
		if ($request->isPost){
			if (\Yii::$app->user->isGuest){//判断是否是游客
				//没有登录
				$this->result['msg'] = '请先登陆';
			}else{
				$edit_user_password_model = new UserEditPassword();
				$edit_user_password_model->load($request->post(),'');
				if ($edit_user_password_model->validate()){
					$model = \Yii::$app->user->identity;
					$model->password = $edit_user_password_model->new_pw;
					$model->save(false);
					$this->result['error'] = true;//保存成功
				}else{
					$this->result['msg'] = $edit_user_password_model->getErrors();
				}
			}
		}else{
			$this->result["msg"] = "请求方式错误";
		}
		return $this->result;
	}
	//获取当前登录的用户信息
	public function actionUserInfo(){
		if (\Yii::$app->request->isGet){
			if (\Yii::$app->user->isGuest){
				$this->result["msg"] = "请先登录";
			}else{
				$userinfo = \Yii::$app->user->identity;
				unset($userinfo->auth_key);
				unset($userinfo->password_hash);
				unset($userinfo->status);

				$this->result['error'] = true;
				$this->result["data"] = $userinfo;
			}
		}else{
			$this->result["msg"] = "请求方式错误";
		}
		return $this->result;
	}
//收货地址
	//添加地址
	public function actionAddrAdd(){
		if (\Yii::$app->request->isPost){
			$model = new Address();
			$model->load(\Yii::$app->request->post(),'');
			if ($model->validate()){
				$model->save(false);
				$this->result['error'] = true;
			}else{
				$this->result['msg'] = $model->getErrors();
			}
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//修改地址
	public function actionAddrEdit(){
		if (\Yii::$app->request->isPost){
			$data = \Yii::$app->request->post();
			$id = isset($data["id"])?$data["id"]:0;
			if ($id!==0){
				$model = Address::find()->where(['id' => $id, 'member_id' => \Yii::$app->user->getId()])->one();
				if ($model != null) {
					$model->load(\Yii::$app->request->post(), '');
					if ($model->validate()) {
						$model->save(false);
						$this->result['error'] = true;
					} else {
						//验证不通过
						$this->result['msg'] = $model->getErrors();
					}
				}else{
					//根据传过来的id没有找到记录
					$this->result['msg'] = "记录不存在";
				}
			}else{
				//缺少要修改地址的id
				$this->result['msg'] = "缺少参数";
			}
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//删除地址
	public function actionAddrDel(){
		if (\Yii::$app->request->isPost){
			$id = \Yii::$app->request->post("id");
			if (isset($id)) {
				$model = Address::find()->where(['id' => $id, 'member_id' => \Yii::$app->user->getId()])->one();
				if ($model != null) {
					$model->delete();
					$this->result['error'] = true;
				} else {
					//根据传过来的id没有找到记录
					$this->result['msg'] = "记录不存在";
				}
			}else{
				$this->result['msg'] = "缺少参数";
			}
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//地址列表
	public function actionAddrShow(){
		if (\Yii::$app->request->isGet){
			$models = Address::find()->where(['member_id' => \Yii::$app->user->getId()])->all();
			$this->result['error'] = true;
			$this->result['data'] = $models;
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
//商品分类
	//获取所有商品分类
	public function actionGoodsCategoryAll(){
		if (\Yii::$app->request->isGet){
			$data = GoodsCategory::find()->all();
			$this->result['error'] = true;
			$this->result['data'] = $data;
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//获取某分类的所有子分类
	public function actionGoodsCategoryChildren(){
		if (\Yii::$app->request->isGet){
			$id = \Yii::$app->request->get("id");
			if (isset($id)){
				$model = GoodsCategory::findOne($id);
				if ($model){
					$children = $model->children(2)->all();
					$this->result['error'] = true;
					$this->result['data'] = $children;
				}else{
					$this->result['msg'] = "没有找到此这个";
				}
			}else{
				$this->result['msg'] = "缺少参数";
			}
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//获取某分类的父分类
	public function actionGoodsCategoryParent(){
		if (\Yii::$app->request->isGet){
			$id = \Yii::$app->request->get("id");
			if (isset($id)){
				$model = GoodsCategory::findOne($id);
				if ($model){
					$children = $model->parents(1)->all();
					$this->result['error'] = true;
					$this->result['data'] = $children;
				}else{
					$this->result['msg'] = "没有找到此这个";
				}
			}else{
				$this->result['msg'] = "缺少参数";
			}
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
//商品
	//获取某分类下面的所有商品
	public function actionGoodsByCategory(){
		if (\Yii::$app->request->isGet){
			$id = \Yii::$app->request->get("id");
			if (isset($id)){
				$category = GoodsCategory::findOne($id);
				if ($category) {
					$query = Goods::find();
					//三种情况  1级分类 2级分类 3级分类
					if($category->depth == 2){//3级分类
						//sql: select * from goods where goods_category_id = $category_id
						$models = $query->andWhere(['goods_category_id'=>$id])->all();
					}else{
						//1级分类 2级分类
						//$category id = 5
						//3级分类ID  7 8
						//SQL select *  from goods where goods_category_id  in (7,8)
						/* $ids = [];//  [7,8]
						 foreach ($category->children()->andWhere(['depth'=>2])->all() as $category3){
							 $ids[]=$category3->id;
						 }*/
						$ids = $category->children()->select('id')->andWhere(['depth'=>2])->column();
						$models = $query->andWhere(['in','goods_category_id',$ids])->all();
					}
					$data = [];
					foreach ($models as $model){
						if ($model->status==1&&$model->is_on_sale==1){
							$data[] = $model;
						}
					}
					$this->result['error'] =true;
					$this->result['data'] = $data;
				}else{
					$this->result['msg'] = "没有找到这个分类";
				}
			}else{
				$this->result['msg'] = "缺少参数";
			}
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//获取某品牌下面的所有商品
	public function actionGoodsByBrand(){
		if (\Yii::$app->request->isGet){
			$id = \Yii::$app->request->get("id");
			if (isset($id)){//判断id是否存在
				$brand = Brand::findOne($id);
				if ($brand) {//判断是否找到了这个品牌
					$models = $brand->goods;//获取这个品牌的所有商品
					$data = [];
					foreach ($models as $model){
						if ($model->status==1 && $model->is_on_sale==1){
							$data[] = $model;
						}
					}
					$this->result['error'] =true;
					$this->result['data'] = $data;
				}else{
					$this->result['msg'] = "没有找到这个分类";
				}
			}else{
				$this->result['msg'] = "缺少参数";
			}
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
//文章
	//获取文章分类
	public function actionArticleCategory(){
		if (\Yii::$app->request->isGet){
			$data = ArticleCategory::find()->all();
			$this->result["error"] = true;
			$this->result["data"] = $data;
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//获取某分类下面的所有文章
	public function actionArticleByCategory(){
		if (\Yii::$app->request->isGet){
			$id = \Yii::$app->request->get("id");
			if (isset($id)){//判断id是否存在
				$category = ArticleCategory::findOne($id);
				if ($category) {//判断是否找到了这个分类
					$models = $category->article;//获取这个分类的所有文章
					foreach ($models as $model){
						$model->article_category_id = $category->name;
					}
					$this->result['error'] =true;
					$this->result['data'] = $models;
				}else{
					$this->result['msg'] = "没有找到这个分类";
				}
			}else{
				$this->result['msg'] = "缺少参数";
			}
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//获取某文章所属分类
	public function actionCategoryByArticle(){
		if (\Yii::$app->request->isGet){
			$id = \Yii::$app->request->get("id");
			if (isset($id)){//判断id是否存在
				$article = Article::findOne($id);
				if ($article) {//判断是否找到了这个分类
					$models = $article->articleCategory;//获取这个分类的所有文章
					$this->result['error'] =true;
					$this->result['data'] = $models;
				}else{
					$this->result['msg'] = "没有找到这个分类";
				}
			}else{
				$this->result['msg'] = "缺少参数";
			}
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
//购物车
	//添加商品到购物车
	public function actionCartAdd(){
		if (\Yii::$app->request->isPost){
			$cart = new Cart();
			$cart->load(\Yii::$app->request->post(),'');//加载用户提交的数据
			if (!$cart->validate()){//如果验证不通过
				$this->result['msg'] = $cart->getErrors();
				return $this->result;
			}
			$goods_id = $cart->goods_id;
			$amount = $cart->amount;
			if (\Yii::$app->user->isGuest){
				//检测是否已经有了购物车
				$cookies = \Yii::$app->request->cookies;
				$val = $cookies->getValue('carts');
				if ($val){
					$val = unserialize($val);
				}else{
					$val = [];
				}

				//检测购物车中已经有了该商品
				if (array_key_exists($goods_id,$val)){
					$val[$goods_id] += $amount;
				}else{
					$val[$goods_id] = $amount;
				}

				//保存数据到cookie
				$cookies = \Yii::$app->response->cookies;
				$cookie = new Cookie();
				$cookie->name = 'carts';
				$cookie->value = serialize($val);
				$cookie->expire = time()+7*24*3600;//保存7天
				$cookies->add($cookie);
			}else{//登录的用户 将购物车信息保存到数据库
				$model = Cart::find()->andWhere(['and',['goods_id'=>$goods_id],['member_id'=>\Yii::$app->user->getId()]])->one();
				if ($model){
					$model->amount += $amount;
				}else{
					$model = new Cart();
					$model->goods_id = $goods_id;
					$model->amount = $amount;
				}
				$model->save(false);
			}
			$this->result["error"] = true;
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//修改购物车某商品数量
	public function actionCartEdit(){
		if (\Yii::$app->request->isPost){
			$cart = new Cart();
			$cart->load(\Yii::$app->request->post(),'');
			if (!$cart->validate()){
				$this->result['msg'] = $cart->getErrors();
				return $this->result;
			}
			$goods_id = $cart->goods_id;
			$amount = $cart->amount;
			if(\Yii::$app->user->isGuest){
				$cookies = \Yii::$app->request->cookies;
				$value = $cookies->getValue('carts');
				if($value){
					$carts = unserialize($value);
				}else{
					$carts = [];
				}

				//检查购物车中是否存在当前需要添加的商品
				if(array_key_exists($goods_id,$carts)){
					$carts[$goods_id] = $amount;
				}else{
					$this->result["msg"] = "购物车中不存在该商品";
					return $this->result;
				}

				$cookies = \Yii::$app->response->cookies;
				$cookie = new Cookie();
				$cookie->name = 'carts';
				$cookie->value = serialize($carts);
				$cookie->expire = time()+7*24*3600;//过期时间戳
				$cookies->add($cookie);
			}else{
				$member_id = \Yii::$app->user->getId();
				$model = Cart::find()->where(['and',['member_id'=>$member_id],['goods_id'=>$goods_id]])->one();
				if ($model){
					$model->amount = $amount;
					$model->save(false);
				}else{
					$this->result["msg"] = "购物车中该商品不存在";
					return $this->result;
				}
			}
			$this->result["error"] = true;
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//删除购物车某商品
	public function actionCartDel(){
		if (\Yii::$app->request->isPost){
			$goods_id = \Yii::$app->request->post("goods_id");
			if (!isset($goods_id)){
				$this->result["msg"] = "缺少参数";
				return $this->result;
			}
			if (\Yii::$app->user->isGuest){
				$value = \Yii::$app->request->cookies->getValue('carts');//
				if ($value){
					$carts = unserialize($value);
				}else{
					$this->result["msg"] = "还没有购物车.";
					return $this->result;
				}
				//var_dump($carts);exit();
				if (array_key_exists($goods_id,$carts)){//如果该商品在数组中
					unset($carts[$goods_id]);//删除数组中的这个值
				}else{//如果不在
					$this->result["msg"] = "购物车中没有这个商品.";
					return $this->result;
				}
				$cookie = new Cookie();
				$cookie->name = 'carts';
				$cookie->value = serialize($carts);
				$cookie->expire = time()+7*24*3600;//过期时间戳
				\Yii::$app->response->cookies->add($cookie);
			}else{
				$member_id = \Yii::$app->user->getId();
				$cart = Cart::find()->where(['and',['member_id'=>$member_id],['goods_id'=>$goods_id]])->one();
				if ($cart!=null){
					$cart->delete();
				}else{
					$this->result["msg"] = "购物车中没有这个商品.";
					return $this->result;
				}
			}
			$this->result["error"] = true;
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//清空购物车
	public function actionCartClear(){
		if (\Yii::$app->request->isGet){
			if (\Yii::$app->user->isGuest){
				$value = \Yii::$app->request->cookies->getValue('carts');//
				if ($value){
					\Yii::$app->response->cookies->remove('carts');
				}
			}else{
				$member_id = \Yii::$app->user->getId();
				Cart::deleteAll(['member_id'=>$member_id]);//删除这个用户的购物车
			}
			$this->result["error"] = true;
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//获取购物车所有商品
	public function actionCartShow(){
		if (\Yii::$app->request->isGet){
			if (\Yii::$app->user->isGuest){
				$value = \Yii::$app->request->cookies->getValue('carts');//
				if ($value){
					$carts = unserialize($value);
				}else{
					$this->result["msg"] = "购物车为空.";
					return $this->result;
				}
				$this->result["data"] = $carts;
			}else{
				$member_id = \Yii::$app->user->getId();
				$carts = Cart::findAll(["member_id"=>$member_id]);
				if ($carts!=[]){
					$this->result["data"] = $carts;
				}else{
					$this->result["msg"] = "购物车中没有这个商品.";
					return $this->result;
				}
			}
			$this->result["error"] = true;
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
//订单
	//获取支付方式->获取订单有哪些支付方法
	public function actionPayShow(){
		if (\Yii::$app->request->isGet){
			$paymethod = Order::$paymentMethod;
			$datas = [];
			foreach ($paymethod as $key=>$value){
				$data = new yii\helpers\Json();
				$data->id = $key;
				$data->name = $value[0];
				$datas[] = $data;
			}
			$this->result["error"] = true;
			$this->result["data"] = $datas;;
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//获取送货方式
	public function actionShippingShow(){
		if (\Yii::$app->request->isGet){
			$shipping = Order::$shippingMethod;
			$datas = [];
			foreach ($shipping as $key=>$value){
				$data = new yii\helpers\Json();
				$data->id = $key;
				$data->name = $value[0];
				$datas[] = $data;
			}
			$this->result["error"] = true;
			$this->result["data"] = $datas;
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//提交订单->结算购物车中的所有商品
	public function actionOrderAdd(){
		$request = Yii::$app->request;
		if ($request->isPost){
			if (Yii::$app->user->isGuest){
				$this->result["msg"] = "请先登录";
				return $this->result;
			}
			//获得数据
			$member_id = Yii::$app->user->getId();
			$order = new Order();
			$order->scenario = Order::SCENARIO_API_SUBMIT;
			$order->load($request->post(),'');//获得送货方式id 和 支付方式id, 地址id
			if (!$order->validate()){
				$this->result["msg"] = $order->getErrors();
				return $this->result;
			}
			//商品清单
			$carts = Cart::findAll(['member_id'=>$member_id]);//获得用户购物车中的所有数据  在Carts模型中建立关系
			if (empty($carts)){//如果购物车中没有商品 , 就返回商城首页
				$this->result["msg"] = "购物车中没有要结算的商品";
				return $this->result;
			};
			foreach ($carts as $cart){
				if ($cart->amount > $cart->goods->stock){
					return $this->result["msg"] = $cart->goods->name."库存不足,不能下单";
				}
			}

			$addr_id = $order->addr_id;//地址id
			$order->member_id = $member_id;
			$addr = Address::find()->where(['and',['member_id'=>$member_id],['id'=>$addr_id]])->one();
			$order->name = $addr->consignee;
			$order->province = $addr->prov;
			$order->city = $addr->city;
			$order->area = $addr->area;
			$order->address = $addr->de_address;
			$order->tel = $addr->tel;
			$delivery = Order::$shippingMethod[$order->delivery_id];
			$order->delivery_name = $delivery[0];
			$order->delivery_price = $delivery[1];
			$payment = Order::$paymentMethod[$order->payment_id];
			$order->payment_name = $payment[0];
			$order->status = 1;
			$order->create_time = time();
			$price_totals = 0;
			foreach ($carts as $cart){
				//这个商品的总价
				$price_total = $cart->goods->shop_price*$cart->amount;//价格
				$price_totals += $price_total;//总价格
			}
			$order->total = $price_totals;

			//生成>订单商品详情表
			$transaction = Yii::$app->db->beginTransaction();//开启事物
			try {//这里有bug  订单商品详情没有记录   订单却成功了
				$order->save(false);
				foreach ($carts as $cart) {

					if ($cart->goods->stock < $cart->amount ) {
						//抛出异常
						throw new yii\db\Exception($cart->goods->name."库存不足,不能下单");
					}
					$orderGoods = new OrderGoods();
					$orderGoods->order_id = $order->id;
					$orderGoods->goods_id = $cart->goods_id;
					$orderGoods->goods_name = $cart->goods->name;
					$orderGoods->logo = $cart->goods->goodsGallery[0]->path;
					$orderGoods->price = $cart->goods->shop_price;
					$orderGoods->amount = $cart->amount;
					$orderGoods->total = $orderGoods->price * $orderGoods->amount;
					//保存订单商品详情表
					$orderGoods->save();
					//清空购物车
					$cart->delete();
				}
				//没有异常,提交事物
				$transaction->commit();
				//提交成功->
				//跳转到成功页面
				$this->result["error"] = true;
				return $this->result;
			}catch (yii\db\Exception $e){
				//出现异常 回滚
				$transaction->rollBack();
				$order->delete();
				$this->result["msg"] = $e;
				return $this->result;
			}

		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//获取当前用户订单列表
	public function actionOrderShow(){
		if (\Yii::$app->request->isGet){
			$models = Order::find()->where(['member_id'=>Yii::$app->user->getId()])->all();
			$this->result['error'] = true;
			$this->result['data'] = $models;
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//取消订单
	public function actionOrderCancel(){
		if (\Yii::$app->request->isGet){
			$order_id = Yii::$app->request->get('order_id');
			if (isset($order_id)){
				$order = Order::findOne(['id'=>$order_id]);
				if ($order_id!==null){
					$order->status = 0;
					$order->save(false);
					$this->result["error"] = true;
				}else{
					$this->result['msg'] = "订单不存在";
				}
			}else{
				$this->result['msg'] = "缺少参数";
			}
		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	public function actionDome(){
		if (\Yii::$app->request->isPost){
			$data = \Yii::$app->request->post();

		}else{
			$this->result['msg'] = "请求方式出错";
		}
		return $this->result;
	}
	//防重放,防篡改,防伪造请求
	public function check(){
		$error = '';
		if (\Yii::$app->request->isPost){
			$data = \Yii::$app->request->post();
		}else{
			$data = \Yii::$app->request->get();
		}
		$time = isset($data['time'])?$data['time']:0;
		if ($time===0){
			//缺少参数(参数缺少时间戳)
			$error = "缺少参数";
		}
		if (time()-$time>60||$time>time()){
			//请求过期(,防止重放)
			$error = "请求过期";
		}
		$sign = isset($data['sign'])?$data['sign']:0;
		if ($sign===0){
			//缺少参数(缺少签名)
			$error = "缺少参数";
		}
		unset($data['sign']);//如果这个键不存在也不会报错.
		ksort($data);//按升序排序 索引
		$key = $this->token.http_build_query($data);//将排序好的参数拼接与请求端商量好的token
		$my_sign = strtoupper(md5($key));
		if ($my_sign!==$sign){
			//缺少参数(防止篡改,防止伪造请求).
			$error = "缺少参数";
		}

		if($error){
			\Yii::$app->response->data = [
				'error'=>false,
				'msg'=>$error,//错误信息,如果有
				'data'=>[]//返回数据
			];
			\Yii::$app->response->send();
		}
	}

}